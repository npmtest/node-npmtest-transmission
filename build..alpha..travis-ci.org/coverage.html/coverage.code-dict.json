{"/home/travis/build/npmtest/node-npmtest-transmission/test.js":"/* istanbul instrument in package npmtest_transmission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-transmission/lib.npmtest_transmission.js":"/* istanbul instrument in package npmtest_transmission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_transmission = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_transmission = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-transmission/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-transmission && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_transmission */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_transmission\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_transmission.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_transmission.rollup.js'] =\n            local.assetsDict['/assets.npmtest_transmission.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_transmission.__dirname + '/lib.npmtest_transmission.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-transmission/node_modules/transmission/lib/transmission.js":"//node utils\nvar http = require('http');\nvar https = require('https');\nvar util = require('util');\nvar fs = require('fs');\nvar events = require('events');\nvar async = require('async');\n\nvar uuid = require('./utils').uuid;\n\nvar Transmission = module.exports = function (options) {\n\n    events.EventEmitter.call(this);\n\n    options = options || {};\n    this.url = options.url || '/transmission/rpc';\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9091;\n    this.ssl = options.ssl == true ? true : false;\n    this.key = null;\n\n    if (options.username) {\n        this.authHeader = 'Basic ' + new Buffer(options.username + (options.password ? ':' + options.password : '')).toString('base64');\n    }\n\n};\n// So will act like an event emitter\nutil.inherits(Transmission, events.EventEmitter);\n\nTransmission.prototype.set = function (ids, options, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    var args = {ids: ids};\n\n    if (typeof options === 'function') {\n        callback = options;\n    } else {\n        if (typeof options === 'object') {\n            var keys = Object.keys(options);\n            for (var i = 0; i < keys.length; i++) {\n                args[keys[i]] = options[keys[i]];\n            }\n        } else {\n            callback(new Error('Arguments mismatch for \"bt.set\"'));\n        }\n    }\n\n    this.callServer({\n        arguments: args,\n        method: this.methods.torrents.set,\n        tag: uuid()\n    }, function (err) {\n        callback(err);\n    });\n\n};\n\nTransmission.prototype.add = function (path, options, callback) {\n    // for retro-compatibility with old function\n    this.addUrl(path, options, callback);\n};\n\nTransmission.prototype.addFile = function (filePath, options, callback) {\n    var self = this;\n    fs.readFile(filePath, function (err, data) {\n        if (err) {\n            throw err;\n        }\n        var fileContentBase64 = new Buffer(data).toString('base64');\n        var args = {};\n        args.metainfo = fileContentBase64;\n        self.addTorrentDataSrc(args, options, callback);\n    });\n};\n\nTransmission.prototype.addBase64 = function (fileb64, options, callback) {\n    var args = {};\n    args.metainfo = fileb64;\n    this.addTorrentDataSrc(args, options, callback);\n};\n\nTransmission.prototype.addUrl = function (url, options, callback) {\n    var args = {};\n    args.filename = url;\n    this.addTorrentDataSrc(args, options, callback);\n};\n\nTransmission.prototype.addTorrentDataSrc = function (args, options, callback) {\n    if (typeof options === 'function') {\n        callback = options;\n    } else {\n        if (typeof options === 'object') {\n            var keys = Object.keys(options);\n            for (var i = 0; i < keys.length; i++) {\n                args[keys[i]] = options[keys[i]];\n            }\n        } else {\n            callback(new Error('Arguments mismatch for \"bt.add\"'));\n        }\n    }\n    this.callServer({\n        arguments: args,\n        method: this.methods.torrents.add,\n        tag: uuid()\n    }, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        var torrent = result['torrent-duplicate'] ? result['torrent-duplicate'] : result['torrent-added'];\n        callback(err, torrent);\n    });\n};\n\nTransmission.prototype.remove = function (ids, del, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    if (typeof del === 'function') {\n        callback = del;\n        del = false;\n    }\n    var options = {\n        arguments: {\n            ids: ids,\n            'delete-local-data': !!del\n        },\n        method: this.methods.torrents.remove,\n        tag: uuid()\n    };\n    this.callServer(options, callback);\n};\n\nTransmission.prototype.move = function (ids, location, move, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    if (typeof move === 'function') {\n        callback = move;\n        move = true;\n    }\n    var options = {\n        arguments: {\n            ids: ids,\n            location: location,\n            move: move\n        },\n        method: this.methods.torrents.location,\n        tag: uuid()\n    };\n    this.callServer(options, callback);\n};\n\n\nTransmission.prototype.rename = function (ids, path, name, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    var options = {\n        arguments: {\n            ids: ids,\n            path: path,\n            name: name\n        },\n        method: this.methods.torrents.rename,\n        tag: uuid()\n    };\n    this.callServer(options, callback);\n};\n\n\nTransmission.prototype.get = function (ids, callback) {\n    var options = {\n        arguments: {\n            fields: this.methods.torrents.fields,\n            ids: ids\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    };\n\n    if (typeof ids === 'function') {\n        callback = ids;\n        delete (options.arguments.ids);\n    } else {\n        options.arguments.ids = Array.isArray(ids) ? ids : [ids];\n    }\n\n    this.callServer(options, callback);\n    return this;\n};\n\nTransmission.prototype.waitForState = function (id, targetState, callback) {\n    \n    var self = this;\n\tvar latestState = 'unknown';\n\tvar latestTorrent = null;\n\tasync.whilst(function(a) {\n\t\treturn latestState !== targetState;\n\t}, function(whilstCb) {\n\t\tself.get(id, function(err, result) {\n\t\t\tif (err) {\n\t\t\t\treturn whilstCb(err);\n\t\t\t}\n\t\t\tvar torrent = result.torrents[0];\n\t\t\t\n\t\t\tif(!torrent){\n\t\t\t\treturn callback(new Error('No id ('+id+') found for torrent'))\n\t\t\t}\n\n\t\t\tlatestTorrent = torrent;\n\t\t\tlatestState = self.statusArray[torrent.status];\n\t\t\tif (latestState === targetState) {\n\t\t\t\twhilstCb(null, torrent);\n\t\t\t} else {\n\t\t\t\tsetTimeout(whilstCb, 1000);\n\t\t\t}\n\t\t});\n\t}, function(err) {\n\t\tif (err) {\n\t\t\treturn callback(err)\n\t\t}\n\t\tcallback(null, latestTorrent);\n\n\t});\n};\n\nTransmission.prototype.peers = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    var options = {\n        arguments: {\n            fields: ['peers', 'hashString', 'id'],\n            ids: ids\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    };\n\n    this.callServer(options, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, result.torrents);\n    });\n    return this;\n};\n\nTransmission.prototype.files = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    var options = {\n        arguments: {\n            fields: ['files', 'fileStats', 'hashString', 'id'],\n            ids: ids\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    };\n\n    this.callServer(options, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, result.torrents);\n    });\n    return this;\n};\n\nTransmission.prototype.fast = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    var options = {\n        arguments: {\n            fields: ['id', 'error', 'errorString', 'eta', 'isFinished', 'isStalled', 'leftUntilDone', 'metadataPercentComplete', 'peersConnected', 'peersGettingFromUs', 'peersSendingToUs', 'percentDone', 'queuePosition', 'rateDownload', 'rateUpload', 'recheckProgress', 'seedRatioMode', 'seedRatioLimit', 'sizeWhenDone', 'status', 'trackers', 'uploadedEver', 'uploadRatio'],\n            ids: ids\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    };\n    this.callServer(options, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, result.torrents);\n    });\n    return this;\n};\n\nTransmission.prototype.stop = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    this.callServer({\n        arguments: {\n            ids: ids\n        },\n        method: this.methods.torrents.stop,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.stopAll = function (callback) {\n    this.callServer({\n        method: this.methods.torrents.stop\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.start = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    this.callServer({\n        arguments: {\n            ids: ids\n        },\n        method: this.methods.torrents.start,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.startAll = function (callback) {\n    this.callServer({\n        method: this.methods.torrents.start\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.startNow = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    this.callServer({\n        arguments: {\n            ids: ids\n        },\n        method: this.methods.torrents.startNow,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.verify = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    this.callServer({\n        arguments: {\n            ids: ids\n        },\n        method: this.methods.torrents.verify,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.reannounce = function (ids, callback) {\n    ids = Array.isArray(ids) ? ids : [ids];\n    this.callServer({\n        arguments: {\n            ids: ids\n        },\n        method: this.methods.torrents.reannounce,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.all = function (callback) {\n    this.callServer({\n        arguments: {\n            fields: this.methods.torrents.fields\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.active = function (callback) {\n    var options = {\n        arguments: {\n            fields: this.methods.torrents.fields,\n            ids: 'recently-active'\n        },\n        method: this.methods.torrents.get,\n        tag: uuid()\n    };\n    this.callServer(options, callback);\n    return this;\n};\n\nTransmission.prototype.session = function (data, callback) {\n    var options = {};\n    if (typeof data !== 'function') {\n        var keys = Object.keys(data);\n        var key;\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            if (!this.methods.session.setTypes[key]) {\n                var error = new Error('Cant set type ' + key);\n                // error.result = page; // FIXME: page not defined\n                callback(error);\n                return this;\n            }\n        }\n        options = {\n            arguments: data,\n            method: this.methods.session.set,\n            tag: uuid()\n        };\n        this.callServer(options, callback);\n    } else {\n    \tcallback = data;\n        options = {\n            method: this.methods.session.get,\n            tag: uuid()\n        };\n        this.callServer(options, callback);\n    }\n    return this;\n};\n\nTransmission.prototype.sessionStats = function (callback) {\n    var options = {\n        method: this.methods.session.stats,\n        tag: uuid()\n    };\n    this.callServer(options, callback);\n};\n\nTransmission.prototype.freeSpace = function (path, callback) {\n    this.callServer({\n        arguments: {\n            path: path\n        },\n        method: this.methods.other.freeSpace\n    }, callback);\n    return this;\n};\n\nTransmission.prototype.callServer = function (query, callBack) {\n    var self = this;\n    var queryJsonify = JSON.stringify(query);\n    var options = {\n        host: this.host,\n        path: this.url,\n        port: this.port,\n        method: 'POST',\n        headers: {\n            'Time': new Date(),\n            'Host': this.host + ':' + this.port,\n            'X-Requested-With': 'Node',\n            'X-Transmission-Session-Id': this.key || '',\n            'Content-Length': queryJsonify.length,\n            'Content-Type': 'application/json'\n        }\n    };\n\n    if (this.authHeader) {\n        options.headers.Authorization = this.authHeader;\n    }\n\n    function onResponse(response) {\n        var page = [];\n\n        function onData(chunk) {\n            page.push(chunk);\n        }\n\n        function onEnd() {\n            var json, error;\n            if (response.statusCode === 409) {\n                self.key = response.headers['x-transmission-session-id'];\n                return self.callServer(query, callBack);\n            } else if (response.statusCode === 200) {\n                page = page.join('');\n                try {\n                    json = JSON.parse(page);\n                } catch (err) {\n                    return callBack(err);\n                }\n\n                if (json.result === 'success') {\n                    callBack(null, json.arguments);\n                } else {\n                    error = new Error(json.result);\n                    error.result = page;\n                    callBack(error);\n                }\n            } else {\n                error = new Error('Status code mismatch: ' + response.statusCode);\n                error.result = page;\n                callBack(error);\n            }\n        }\n\n\n        response.setEncoding('utf8');\n        response.on('data', onData);\n        response.on('end', onEnd);\n    }\n\n    var res = (this.ssl ? https : http).request(options, onResponse);\n    res.on('error', callBack).end(queryJsonify, 'utf8');\n\n};\n\nTransmission.prototype.statusArray = ['STOPPED', 'CHECK_WAIT', 'CHECK', 'DOWNLOAD_WAIT', 'DOWNLOAD', 'SEED_WAIT', 'SEED', 'ISOLATED'];\nTransmission.prototype.status = {};\n\nTransmission.prototype.statusArray.forEach(function (status, i) {\n    Transmission.prototype.status[status] = i;\n});\n\nTransmission.prototype.methods = {\n    torrents: {\n        stop: 'torrent-stop',\n        start: 'torrent-start',\n        startNow: 'torrent-start-now',\n        verify: 'torrent-verify',\n        reannounce: 'torrent-reannounce',\n        set: 'torrent-set',\n        setTypes: {\n            'bandwidthPriority': true,\n            'downloadLimit': true,\n            'downloadLimited': true,\n            'files-wanted': true,\n            'files-unwanted': true,\n            'honorsSessionLimits': true,\n            'ids': true,\n            'location': true,\n            'peer-limit': true,\n            'priority-high': true,\n            'priority-low': true,\n            'priority-normal': true,\n            'seedRatioLimit': true,\n            'seedRatioMode': true,\n            'uploadLimit': true,\n            'uploadLimited': true\n        },\n        add: 'torrent-add',\n        addTypes: {\n            'download-dir': true,\n            'filename': true,\n            'metainfo': true,\n            'paused': true,\n            'peer-limit': true,\n            'files-wanted': true,\n            'files-unwanted': true,\n            'priority-high': true,\n            'priority-low': true,\n            'priority-normal': true\n        },\n        rename: 'torrent-rename-path',\n        remove: 'torrent-remove',\n        removeTypes: {\n            'ids': true,\n            'delete-local-data': true\n        },\n        location: 'torrent-set-location',\n        locationTypes: {\n            'location': true,\n            'ids': true,\n            'move': true\n        },\n        get: 'torrent-get',\n        fields: ['activityDate', 'addedDate', 'bandwidthPriority', 'comment', 'corruptEver', 'creator', 'dateCreated', 'desiredAvailable', 'doneDate', 'downloadDir', 'downloadedEver', 'downloadLimit', 'downloadLimited', 'error', 'errorString', 'eta', 'files', 'fileStats', 'hashString', 'haveUnchecked', 'haveValid', 'honorsSessionLimits', 'id', 'isFinished', 'isPrivate', 'leftUntilDone', 'magnetLink', 'manualAnnounceTime', 'maxConnectedPeers', 'metadataPercentComplete', 'name', 'peer-limit', 'peers', 'peersConnected', 'peersFrom', 'peersGettingFromUs', 'peersKnown', 'peersSendingToUs', 'percentDone', 'pieces', 'pieceCount', 'pieceSize', 'priorities', 'rateDownload', 'rateUpload', 'recheckProgress', 'seedIdleLimit', 'seedIdleMode', 'seedRatioLimit', 'seedRatioMode', 'sizeWhenDone', 'startDate', 'status', 'trackers', 'trackerStats', 'totalSize', 'torrentFile', 'uploadedEver', 'uploadLimit', 'uploadLimited', 'uploadRatio', 'wanted', 'webseeds', 'webseedsSendingToUs']\n    },\n    session: {\n        stats: 'session-stats',\n        get: 'session-get',\n        set: 'session-set',\n        setTypes: {\n            'start-added-torrents': true,\n            'alt-speed-down': true,\n            'alt-speed-enabled': true,\n            'alt-speed-time-begin': true,\n            'alt-speed-time-enabled': true,\n            'alt-speed-time-end': true,\n            'alt-speed-time-day': true,\n            'alt-speed-up': true,\n            'blocklist-enabled': true,\n            'dht-enabled': true,\n            'encryption': true,\n            'download-dir': true,\n            'peer-limit-global': true,\n            'peer-limit-per-torrent': true,\n            'pex-enabled': true,\n            'peer-port': true,\n            'peer-port-random-on-start': true,\n            'port-forwarding-enabled': true,\n            'seedRatioLimit': true,\n            'seedRatioLimited': true,\n            'speed-limit-down': true,\n            'speed-limit-down-enabled': true,\n            'speed-limit-up': true,\n            'speed-limit-up-enabled': true\n        }\n    },\n    other: {\n        blockList: 'blocklist-update',\n        port: 'port-test',\n        freeSpace: 'free-space'\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-transmission/node_modules/transmission/lib/utils.js":"/***\n *\n *\n */\n\nvar S4 = function() {\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n};\n\nexports.uuid = function() {\n\treturn (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());\n};\n"}